//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:\PackageDev\OnionScript\src\OnionScript.Compiler\Grammar\OnionScript.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace OrbHall.OnionScript.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class OnionScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		WHITESPACE=25, STATEMENT_BEGIN=26, STATEMENT_END=27, STATEMENT_BEGIN_IGNORE_WHITESPACE=28, 
		STATEMENT_END_IGNORE_WHITESPACE=29, TEXT=30, BOOLEAN=31, FLOAT=32, INTEGER=33, 
		IDENTIFIER=34, COMMENT=35, ENDL=36;
	public const int
		RULE_script = 0, RULE_statement = 1, RULE_methodcall = 2, RULE_method_operation = 3, 
		RULE_operator_import = 4, RULE_operator_function = 5, RULE_operator_let = 6, 
		RULE_operator_return = 7, RULE_operator_for = 8, RULE_operator_while = 9, 
		RULE_operator_dowhile = 10, RULE_operator_set = 11, RULE_operator_add = 12, 
		RULE_operator_subtract = 13, RULE_operator_multiply = 14, RULE_operator_divide = 15, 
		RULE_operator_modulus = 16, RULE_operator_not = 17, RULE_operator_and = 18, 
		RULE_operator_or = 19, RULE_operator_nor = 20, RULE_operator_nand = 21, 
		RULE_operator_equal = 22, RULE_operator_notequal = 23, RULE_operator_greaterthan = 24, 
		RULE_operator_greaterthanequal = 25, RULE_operator_lessthan = 26, RULE_operator_lessthanequal = 27, 
		RULE_import_statement = 28, RULE_anonymous_function = 29, RULE_function_definition = 30, 
		RULE_function_return = 31, RULE_variable_definition = 32, RULE_text = 33, 
		RULE_integer = 34, RULE_float = 35, RULE_boolean = 36, RULE_identifier = 37, 
		RULE_argument_text = 38, RULE_argument_integer = 39, RULE_argument_float = 40, 
		RULE_argument_number = 41, RULE_argument_boolean = 42, RULE_argument_statement = 43, 
		RULE_argument_any = 44;
	public static readonly string[] ruleNames = {
		"script", "statement", "methodcall", "method_operation", "operator_import", 
		"operator_function", "operator_let", "operator_return", "operator_for", 
		"operator_while", "operator_dowhile", "operator_set", "operator_add", 
		"operator_subtract", "operator_multiply", "operator_divide", "operator_modulus", 
		"operator_not", "operator_and", "operator_or", "operator_nor", "operator_nand", 
		"operator_equal", "operator_notequal", "operator_greaterthan", "operator_greaterthanequal", 
		"operator_lessthan", "operator_lessthanequal", "import_statement", "anonymous_function", 
		"function_definition", "function_return", "variable_definition", "text", 
		"integer", "float", "boolean", "identifier", "argument_text", "argument_integer", 
		"argument_float", "argument_number", "argument_boolean", "argument_statement", 
		"argument_any"
	};

	private static readonly string[] _LiteralNames = {
		null, "'import'", "'func'", "'let'", "'return'", "'for'", "'while'", "'dowhile'", 
		"'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'not'", "'and'", "'or'", "'nor'", 
		"'nand'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "WHITESPACE", "STATEMENT_BEGIN", "STATEMENT_END", "STATEMENT_BEGIN_IGNORE_WHITESPACE", 
		"STATEMENT_END_IGNORE_WHITESPACE", "TEXT", "BOOLEAN", "FLOAT", "INTEGER", 
		"IDENTIFIER", "COMMENT", "ENDL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OnionScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OnionScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OnionScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OnionScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(OnionScriptParser.Eof, 0); }
		public Import_statementContext[] import_statement() {
			return GetRuleContexts<Import_statementContext>();
		}
		public Import_statementContext import_statement(int i) {
			return GetRuleContext<Import_statementContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 90; import_statement();
					}
					} 
				}
				State = 95;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STATEMENT_BEGIN || _la==STATEMENT_BEGIN_IGNORE_WHITESPACE) {
				{
				{
				State = 96; statement();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 102; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public MethodcallContext methodcall() {
			return GetRuleContext<MethodcallContext>(0);
		}
		public Function_definitionContext function_definition() {
			return GetRuleContext<Function_definitionContext>(0);
		}
		public Function_returnContext function_return() {
			return GetRuleContext<Function_returnContext>(0);
		}
		public Variable_definitionContext variable_definition() {
			return GetRuleContext<Variable_definitionContext>(0);
		}
		public Anonymous_functionContext anonymous_function() {
			return GetRuleContext<Anonymous_functionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; methodcall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105; function_definition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 106; function_return();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 107; variable_definition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 108; anonymous_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodcallContext : ParserRuleContext {
		public ITerminalNode STATEMENT_BEGIN() { return GetToken(OnionScriptParser.STATEMENT_BEGIN, 0); }
		public Method_operationContext method_operation() {
			return GetRuleContext<Method_operationContext>(0);
		}
		public ITerminalNode STATEMENT_END() { return GetToken(OnionScriptParser.STATEMENT_END, 0); }
		public MethodcallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodcall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodcall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodcallContext methodcall() {
		MethodcallContext _localctx = new MethodcallContext(Context, State);
		EnterRule(_localctx, 4, RULE_methodcall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(STATEMENT_BEGIN);
			State = 112; method_operation();
			State = 113; Match(STATEMENT_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_operationContext : ParserRuleContext {
		public Method_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_operation; } }
	 
		public Method_operationContext() { }
		public virtual void CopyFrom(Method_operationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorNandContext : Method_operationContext {
		public Operator_nandContext operator_nand() {
			return GetRuleContext<Operator_nandContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_booleanContext[] argument_boolean() {
			return GetRuleContexts<Argument_booleanContext>();
		}
		public Argument_booleanContext argument_boolean(int i) {
			return GetRuleContext<Argument_booleanContext>(i);
		}
		public OperatorNandContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorNand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorSetContext : Method_operationContext {
		public Operator_setContext operator_set() {
			return GetRuleContext<Operator_setContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Argument_anyContext argument_any() {
			return GetRuleContext<Argument_anyContext>(0);
		}
		public OperatorSetContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorSet(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorDivideContext : Method_operationContext {
		public Operator_divideContext operator_divide() {
			return GetRuleContext<Operator_divideContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_numberContext[] argument_number() {
			return GetRuleContexts<Argument_numberContext>();
		}
		public Argument_numberContext argument_number(int i) {
			return GetRuleContext<Argument_numberContext>(i);
		}
		public OperatorDivideContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorDivide(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorGreaterThanEqualContext : Method_operationContext {
		public Operator_greaterthanequalContext operator_greaterthanequal() {
			return GetRuleContext<Operator_greaterthanequalContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_numberContext[] argument_number() {
			return GetRuleContexts<Argument_numberContext>();
		}
		public Argument_numberContext argument_number(int i) {
			return GetRuleContext<Argument_numberContext>(i);
		}
		public OperatorGreaterThanEqualContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorGreaterThanEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorAddContext : Method_operationContext {
		public Operator_addContext operator_add() {
			return GetRuleContext<Operator_addContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_numberContext[] argument_number() {
			return GetRuleContexts<Argument_numberContext>();
		}
		public Argument_numberContext argument_number(int i) {
			return GetRuleContext<Argument_numberContext>(i);
		}
		public OperatorAddContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorAndContext : Method_operationContext {
		public Operator_andContext operator_and() {
			return GetRuleContext<Operator_andContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_booleanContext[] argument_boolean() {
			return GetRuleContexts<Argument_booleanContext>();
		}
		public Argument_booleanContext argument_boolean(int i) {
			return GetRuleContext<Argument_booleanContext>(i);
		}
		public OperatorAndContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorGreaterThanContext : Method_operationContext {
		public Operator_greaterthanContext operator_greaterthan() {
			return GetRuleContext<Operator_greaterthanContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_numberContext[] argument_number() {
			return GetRuleContexts<Argument_numberContext>();
		}
		public Argument_numberContext argument_number(int i) {
			return GetRuleContext<Argument_numberContext>(i);
		}
		public OperatorGreaterThanContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorGreaterThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorCallMethodContext : Method_operationContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_anyContext[] argument_any() {
			return GetRuleContexts<Argument_anyContext>();
		}
		public Argument_anyContext argument_any(int i) {
			return GetRuleContext<Argument_anyContext>(i);
		}
		public OperatorCallMethodContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorCallMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorWhileContext : Method_operationContext {
		public Operator_whileContext operator_while() {
			return GetRuleContext<Operator_whileContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_booleanContext argument_boolean() {
			return GetRuleContext<Argument_booleanContext>(0);
		}
		public Anonymous_functionContext anonymous_function() {
			return GetRuleContext<Anonymous_functionContext>(0);
		}
		public MethodcallContext methodcall() {
			return GetRuleContext<MethodcallContext>(0);
		}
		public OperatorWhileContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorSubtractContext : Method_operationContext {
		public Operator_subtractContext operator_subtract() {
			return GetRuleContext<Operator_subtractContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_numberContext[] argument_number() {
			return GetRuleContexts<Argument_numberContext>();
		}
		public Argument_numberContext argument_number(int i) {
			return GetRuleContext<Argument_numberContext>(i);
		}
		public OperatorSubtractContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorSubtract(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorOrContext : Method_operationContext {
		public Operator_orContext operator_or() {
			return GetRuleContext<Operator_orContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_booleanContext[] argument_boolean() {
			return GetRuleContexts<Argument_booleanContext>();
		}
		public Argument_booleanContext argument_boolean(int i) {
			return GetRuleContext<Argument_booleanContext>(i);
		}
		public OperatorOrContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorLessThanEqualContext : Method_operationContext {
		public Operator_lessthanequalContext operator_lessthanequal() {
			return GetRuleContext<Operator_lessthanequalContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_numberContext[] argument_number() {
			return GetRuleContexts<Argument_numberContext>();
		}
		public Argument_numberContext argument_number(int i) {
			return GetRuleContext<Argument_numberContext>(i);
		}
		public OperatorLessThanEqualContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorLessThanEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorNotContext : Method_operationContext {
		public Operator_notContext operator_not() {
			return GetRuleContext<Operator_notContext>(0);
		}
		public ITerminalNode WHITESPACE() { return GetToken(OnionScriptParser.WHITESPACE, 0); }
		public Argument_booleanContext argument_boolean() {
			return GetRuleContext<Argument_booleanContext>(0);
		}
		public OperatorNotContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorNorContext : Method_operationContext {
		public Operator_norContext operator_nor() {
			return GetRuleContext<Operator_norContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_booleanContext[] argument_boolean() {
			return GetRuleContexts<Argument_booleanContext>();
		}
		public Argument_booleanContext argument_boolean(int i) {
			return GetRuleContext<Argument_booleanContext>(i);
		}
		public OperatorNorContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorNor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorMultiplyContext : Method_operationContext {
		public Operator_multiplyContext operator_multiply() {
			return GetRuleContext<Operator_multiplyContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_numberContext[] argument_number() {
			return GetRuleContexts<Argument_numberContext>();
		}
		public Argument_numberContext argument_number(int i) {
			return GetRuleContext<Argument_numberContext>(i);
		}
		public OperatorMultiplyContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMultiply(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorDoWhileContext : Method_operationContext {
		public Operator_dowhileContext operator_dowhile() {
			return GetRuleContext<Operator_dowhileContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_booleanContext argument_boolean() {
			return GetRuleContext<Argument_booleanContext>(0);
		}
		public Anonymous_functionContext anonymous_function() {
			return GetRuleContext<Anonymous_functionContext>(0);
		}
		public MethodcallContext methodcall() {
			return GetRuleContext<MethodcallContext>(0);
		}
		public OperatorDoWhileContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorDoWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorLessThanContext : Method_operationContext {
		public Operator_lessthanContext operator_lessthan() {
			return GetRuleContext<Operator_lessthanContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_numberContext[] argument_number() {
			return GetRuleContexts<Argument_numberContext>();
		}
		public Argument_numberContext argument_number(int i) {
			return GetRuleContext<Argument_numberContext>(i);
		}
		public OperatorLessThanContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorLessThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorModulusContext : Method_operationContext {
		public Operator_modulusContext operator_modulus() {
			return GetRuleContext<Operator_modulusContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_numberContext[] argument_number() {
			return GetRuleContexts<Argument_numberContext>();
		}
		public Argument_numberContext argument_number(int i) {
			return GetRuleContext<Argument_numberContext>(i);
		}
		public OperatorModulusContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorModulus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorEqualsContext : Method_operationContext {
		public Operator_equalContext operator_equal() {
			return GetRuleContext<Operator_equalContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_anyContext[] argument_any() {
			return GetRuleContexts<Argument_anyContext>();
		}
		public Argument_anyContext argument_any(int i) {
			return GetRuleContext<Argument_anyContext>(i);
		}
		public OperatorEqualsContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorNotEqualsContext : Method_operationContext {
		public Operator_notequalContext operator_notequal() {
			return GetRuleContext<Operator_notequalContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public Argument_anyContext[] argument_any() {
			return GetRuleContexts<Argument_anyContext>();
		}
		public Argument_anyContext argument_any(int i) {
			return GetRuleContext<Argument_anyContext>(i);
		}
		public OperatorNotEqualsContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorNotEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorForContext : Method_operationContext {
		public Operator_forContext operator_for() {
			return GetRuleContext<Operator_forContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Argument_numberContext argument_number() {
			return GetRuleContext<Argument_numberContext>(0);
		}
		public Argument_booleanContext argument_boolean() {
			return GetRuleContext<Argument_booleanContext>(0);
		}
		public Anonymous_functionContext[] anonymous_function() {
			return GetRuleContexts<Anonymous_functionContext>();
		}
		public Anonymous_functionContext anonymous_function(int i) {
			return GetRuleContext<Anonymous_functionContext>(i);
		}
		public MethodcallContext methodcall() {
			return GetRuleContext<MethodcallContext>(0);
		}
		public OperatorForContext(Method_operationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_operationContext method_operation() {
		Method_operationContext _localctx = new Method_operationContext(Context, State);
		EnterRule(_localctx, 6, RULE_method_operation);
		int _la;
		try {
			State = 253;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new OperatorCallMethodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 115; identifier();
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WHITESPACE) {
					{
					{
					State = 116; Match(WHITESPACE);
					State = 117; argument_any();
					}
					}
					State = 122;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__7:
				_localctx = new OperatorSetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 123; operator_set();
				State = 124; Match(WHITESPACE);
				State = 125; identifier();
				State = 126; Match(WHITESPACE);
				State = 127; argument_any();
				}
				break;
			case T__8:
				_localctx = new OperatorAddContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 129; operator_add();
				State = 130; Match(WHITESPACE);
				State = 131; argument_number();
				State = 132; Match(WHITESPACE);
				State = 133; argument_number();
				}
				break;
			case T__9:
				_localctx = new OperatorSubtractContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 135; operator_subtract();
				State = 136; Match(WHITESPACE);
				State = 137; argument_number();
				State = 138; Match(WHITESPACE);
				State = 139; argument_number();
				}
				break;
			case T__10:
				_localctx = new OperatorMultiplyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 141; operator_multiply();
				State = 142; Match(WHITESPACE);
				State = 143; argument_number();
				State = 144; Match(WHITESPACE);
				State = 145; argument_number();
				}
				break;
			case T__11:
				_localctx = new OperatorDivideContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 147; operator_divide();
				State = 148; Match(WHITESPACE);
				State = 149; argument_number();
				State = 150; Match(WHITESPACE);
				State = 151; argument_number();
				}
				break;
			case T__12:
				_localctx = new OperatorModulusContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 153; operator_modulus();
				State = 154; Match(WHITESPACE);
				State = 155; argument_number();
				State = 156; Match(WHITESPACE);
				State = 157; argument_number();
				}
				break;
			case T__13:
				_localctx = new OperatorNotContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 159; operator_not();
				State = 160; Match(WHITESPACE);
				State = 161; argument_boolean();
				}
				break;
			case T__14:
				_localctx = new OperatorAndContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 163; operator_and();
				State = 164; Match(WHITESPACE);
				State = 165; argument_boolean();
				State = 166; Match(WHITESPACE);
				State = 167; argument_boolean();
				}
				break;
			case T__15:
				_localctx = new OperatorOrContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 169; operator_or();
				State = 170; Match(WHITESPACE);
				State = 171; argument_boolean();
				State = 172; Match(WHITESPACE);
				State = 173; argument_boolean();
				}
				break;
			case T__16:
				_localctx = new OperatorNorContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 175; operator_nor();
				State = 176; Match(WHITESPACE);
				State = 177; argument_boolean();
				State = 178; Match(WHITESPACE);
				State = 179; argument_boolean();
				}
				break;
			case T__17:
				_localctx = new OperatorNandContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 181; operator_nand();
				State = 182; Match(WHITESPACE);
				State = 183; argument_boolean();
				State = 184; Match(WHITESPACE);
				State = 185; argument_boolean();
				}
				break;
			case T__18:
				_localctx = new OperatorEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 187; operator_equal();
				State = 188; Match(WHITESPACE);
				State = 189; argument_any();
				State = 190; Match(WHITESPACE);
				State = 191; argument_any();
				}
				break;
			case T__19:
				_localctx = new OperatorNotEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 193; operator_notequal();
				State = 194; Match(WHITESPACE);
				State = 195; argument_any();
				State = 196; Match(WHITESPACE);
				State = 197; argument_any();
				}
				break;
			case T__20:
				_localctx = new OperatorGreaterThanContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 199; operator_greaterthan();
				State = 200; Match(WHITESPACE);
				State = 201; argument_number();
				State = 202; Match(WHITESPACE);
				State = 203; argument_number();
				}
				break;
			case T__21:
				_localctx = new OperatorGreaterThanEqualContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 205; operator_greaterthanequal();
				State = 206; Match(WHITESPACE);
				State = 207; argument_number();
				State = 208; Match(WHITESPACE);
				State = 209; argument_number();
				}
				break;
			case T__22:
				_localctx = new OperatorLessThanContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 211; operator_lessthan();
				State = 212; Match(WHITESPACE);
				State = 213; argument_number();
				State = 214; Match(WHITESPACE);
				State = 215; argument_number();
				}
				break;
			case T__23:
				_localctx = new OperatorLessThanEqualContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 217; operator_lessthanequal();
				State = 218; Match(WHITESPACE);
				State = 219; argument_number();
				State = 220; Match(WHITESPACE);
				State = 221; argument_number();
				}
				break;
			case T__4:
				_localctx = new OperatorForContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 223; operator_for();
				State = 224; Match(WHITESPACE);
				State = 225; identifier();
				State = 226; Match(WHITESPACE);
				State = 227; argument_number();
				State = 228; Match(WHITESPACE);
				State = 229; argument_boolean();
				State = 230; Match(WHITESPACE);
				State = 231; anonymous_function();
				State = 232; Match(WHITESPACE);
				State = 235;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STATEMENT_BEGIN_IGNORE_WHITESPACE:
					{
					State = 233; anonymous_function();
					}
					break;
				case STATEMENT_BEGIN:
					{
					State = 234; methodcall();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case T__5:
				_localctx = new OperatorWhileContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 237; operator_while();
				State = 238; Match(WHITESPACE);
				State = 239; argument_boolean();
				State = 240; Match(WHITESPACE);
				State = 243;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STATEMENT_BEGIN_IGNORE_WHITESPACE:
					{
					State = 241; anonymous_function();
					}
					break;
				case STATEMENT_BEGIN:
					{
					State = 242; methodcall();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case T__6:
				_localctx = new OperatorDoWhileContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 245; operator_dowhile();
				State = 246; Match(WHITESPACE);
				State = 247; argument_boolean();
				State = 248; Match(WHITESPACE);
				State = 251;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STATEMENT_BEGIN_IGNORE_WHITESPACE:
					{
					State = 249; anonymous_function();
					}
					break;
				case STATEMENT_BEGIN:
					{
					State = 250; methodcall();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_importContext : ParserRuleContext {
		public Operator_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_import; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_importContext operator_import() {
		Operator_importContext _localctx = new Operator_importContext(Context, State);
		EnterRule(_localctx, 8, RULE_operator_import);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_functionContext : ParserRuleContext {
		public Operator_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_functionContext operator_function() {
		Operator_functionContext _localctx = new Operator_functionContext(Context, State);
		EnterRule(_localctx, 10, RULE_operator_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_letContext : ParserRuleContext {
		public Operator_letContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_let; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_let(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_letContext operator_let() {
		Operator_letContext _localctx = new Operator_letContext(Context, State);
		EnterRule(_localctx, 12, RULE_operator_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_returnContext : ParserRuleContext {
		public Operator_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_return; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_returnContext operator_return() {
		Operator_returnContext _localctx = new Operator_returnContext(Context, State);
		EnterRule(_localctx, 14, RULE_operator_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_forContext : ParserRuleContext {
		public Operator_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_for; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_for(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_forContext operator_for() {
		Operator_forContext _localctx = new Operator_forContext(Context, State);
		EnterRule(_localctx, 16, RULE_operator_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_whileContext : ParserRuleContext {
		public Operator_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_while; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_while(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_whileContext operator_while() {
		Operator_whileContext _localctx = new Operator_whileContext(Context, State);
		EnterRule(_localctx, 18, RULE_operator_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_dowhileContext : ParserRuleContext {
		public Operator_dowhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_dowhile; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_dowhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_dowhileContext operator_dowhile() {
		Operator_dowhileContext _localctx = new Operator_dowhileContext(Context, State);
		EnterRule(_localctx, 20, RULE_operator_dowhile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_setContext : ParserRuleContext {
		public Operator_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_set; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_setContext operator_set() {
		Operator_setContext _localctx = new Operator_setContext(Context, State);
		EnterRule(_localctx, 22, RULE_operator_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_addContext : ParserRuleContext {
		public Operator_addContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_add; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_add(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_addContext operator_add() {
		Operator_addContext _localctx = new Operator_addContext(Context, State);
		EnterRule(_localctx, 24, RULE_operator_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_subtractContext : ParserRuleContext {
		public Operator_subtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_subtract; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_subtract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_subtractContext operator_subtract() {
		Operator_subtractContext _localctx = new Operator_subtractContext(Context, State);
		EnterRule(_localctx, 26, RULE_operator_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_multiplyContext : ParserRuleContext {
		public Operator_multiplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_multiply; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_multiply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_multiplyContext operator_multiply() {
		Operator_multiplyContext _localctx = new Operator_multiplyContext(Context, State);
		EnterRule(_localctx, 28, RULE_operator_multiply);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_divideContext : ParserRuleContext {
		public Operator_divideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_divide; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_divide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_divideContext operator_divide() {
		Operator_divideContext _localctx = new Operator_divideContext(Context, State);
		EnterRule(_localctx, 30, RULE_operator_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_modulusContext : ParserRuleContext {
		public Operator_modulusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_modulus; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_modulus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_modulusContext operator_modulus() {
		Operator_modulusContext _localctx = new Operator_modulusContext(Context, State);
		EnterRule(_localctx, 32, RULE_operator_modulus);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_notContext : ParserRuleContext {
		public Operator_notContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_not; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_not(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_notContext operator_not() {
		Operator_notContext _localctx = new Operator_notContext(Context, State);
		EnterRule(_localctx, 34, RULE_operator_not);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_andContext : ParserRuleContext {
		public Operator_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_and; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_andContext operator_and() {
		Operator_andContext _localctx = new Operator_andContext(Context, State);
		EnterRule(_localctx, 36, RULE_operator_and);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_orContext : ParserRuleContext {
		public Operator_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_or; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_orContext operator_or() {
		Operator_orContext _localctx = new Operator_orContext(Context, State);
		EnterRule(_localctx, 38, RULE_operator_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_norContext : ParserRuleContext {
		public Operator_norContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_nor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_nor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_norContext operator_nor() {
		Operator_norContext _localctx = new Operator_norContext(Context, State);
		EnterRule(_localctx, 40, RULE_operator_nor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_nandContext : ParserRuleContext {
		public Operator_nandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_nand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_nand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_nandContext operator_nand() {
		Operator_nandContext _localctx = new Operator_nandContext(Context, State);
		EnterRule(_localctx, 42, RULE_operator_nand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_equalContext : ParserRuleContext {
		public Operator_equalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_equal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_equal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_equalContext operator_equal() {
		Operator_equalContext _localctx = new Operator_equalContext(Context, State);
		EnterRule(_localctx, 44, RULE_operator_equal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_notequalContext : ParserRuleContext {
		public Operator_notequalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_notequal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_notequal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_notequalContext operator_notequal() {
		Operator_notequalContext _localctx = new Operator_notequalContext(Context, State);
		EnterRule(_localctx, 46, RULE_operator_notequal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_greaterthanContext : ParserRuleContext {
		public Operator_greaterthanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_greaterthan; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_greaterthan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_greaterthanContext operator_greaterthan() {
		Operator_greaterthanContext _localctx = new Operator_greaterthanContext(Context, State);
		EnterRule(_localctx, 48, RULE_operator_greaterthan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_greaterthanequalContext : ParserRuleContext {
		public Operator_greaterthanequalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_greaterthanequal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_greaterthanequal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_greaterthanequalContext operator_greaterthanequal() {
		Operator_greaterthanequalContext _localctx = new Operator_greaterthanequalContext(Context, State);
		EnterRule(_localctx, 50, RULE_operator_greaterthanequal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_lessthanContext : ParserRuleContext {
		public Operator_lessthanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_lessthan; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_lessthan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_lessthanContext operator_lessthan() {
		Operator_lessthanContext _localctx = new Operator_lessthanContext(Context, State);
		EnterRule(_localctx, 52, RULE_operator_lessthan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_lessthanequalContext : ParserRuleContext {
		public Operator_lessthanequalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_lessthanequal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_lessthanequal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_lessthanequalContext operator_lessthanequal() {
		Operator_lessthanequalContext _localctx = new Operator_lessthanequalContext(Context, State);
		EnterRule(_localctx, 54, RULE_operator_lessthanequal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_statementContext : ParserRuleContext {
		public ITerminalNode STATEMENT_BEGIN() { return GetToken(OnionScriptParser.STATEMENT_BEGIN, 0); }
		public Operator_importContext operator_import() {
			return GetRuleContext<Operator_importContext>(0);
		}
		public ITerminalNode WHITESPACE() { return GetToken(OnionScriptParser.WHITESPACE, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode STATEMENT_END() { return GetToken(OnionScriptParser.STATEMENT_END, 0); }
		public Import_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_statementContext import_statement() {
		Import_statementContext _localctx = new Import_statementContext(Context, State);
		EnterRule(_localctx, 56, RULE_import_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(STATEMENT_BEGIN);
			State = 304; operator_import();
			State = 305; Match(WHITESPACE);
			State = 306; text();
			State = 307; Match(STATEMENT_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_functionContext : ParserRuleContext {
		public ITerminalNode STATEMENT_BEGIN_IGNORE_WHITESPACE() { return GetToken(OnionScriptParser.STATEMENT_BEGIN_IGNORE_WHITESPACE, 0); }
		public ITerminalNode STATEMENT_END_IGNORE_WHITESPACE() { return GetToken(OnionScriptParser.STATEMENT_END_IGNORE_WHITESPACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Anonymous_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_functionContext anonymous_function() {
		Anonymous_functionContext _localctx = new Anonymous_functionContext(Context, State);
		EnterRule(_localctx, 58, RULE_anonymous_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(STATEMENT_BEGIN_IGNORE_WHITESPACE);
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STATEMENT_BEGIN || _la==STATEMENT_BEGIN_IGNORE_WHITESPACE) {
				{
				{
				State = 310; statement();
				}
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 316; Match(STATEMENT_END_IGNORE_WHITESPACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definitionContext : ParserRuleContext {
		public ITerminalNode STATEMENT_BEGIN() { return GetToken(OnionScriptParser.STATEMENT_BEGIN, 0); }
		public Operator_functionContext operator_function() {
			return GetRuleContext<Operator_functionContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode STATEMENT_END() { return GetToken(OnionScriptParser.STATEMENT_END, 0); }
		public Anonymous_functionContext anonymous_function() {
			return GetRuleContext<Anonymous_functionContext>(0);
		}
		public Function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_definitionContext function_definition() {
		Function_definitionContext _localctx = new Function_definitionContext(Context, State);
		EnterRule(_localctx, 60, RULE_function_definition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(STATEMENT_BEGIN);
			State = 319; operator_function();
			State = 320; Match(WHITESPACE);
			State = 321; identifier();
			State = 326;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 322; Match(WHITESPACE);
					State = 323; identifier();
					}
					} 
				}
				State = 328;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 329; Match(WHITESPACE);
			{
			State = 330; anonymous_function();
			}
			State = 331; Match(STATEMENT_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_returnContext : ParserRuleContext {
		public ITerminalNode STATEMENT_BEGIN() { return GetToken(OnionScriptParser.STATEMENT_BEGIN, 0); }
		public Operator_returnContext operator_return() {
			return GetRuleContext<Operator_returnContext>(0);
		}
		public ITerminalNode WHITESPACE() { return GetToken(OnionScriptParser.WHITESPACE, 0); }
		public Argument_anyContext argument_any() {
			return GetRuleContext<Argument_anyContext>(0);
		}
		public ITerminalNode STATEMENT_END() { return GetToken(OnionScriptParser.STATEMENT_END, 0); }
		public Function_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_return; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_returnContext function_return() {
		Function_returnContext _localctx = new Function_returnContext(Context, State);
		EnterRule(_localctx, 62, RULE_function_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(STATEMENT_BEGIN);
			State = 334; operator_return();
			State = 335; Match(WHITESPACE);
			State = 336; argument_any();
			State = 337; Match(STATEMENT_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_definitionContext : ParserRuleContext {
		public ITerminalNode STATEMENT_BEGIN() { return GetToken(OnionScriptParser.STATEMENT_BEGIN, 0); }
		public Operator_letContext operator_let() {
			return GetRuleContext<Operator_letContext>(0);
		}
		public ITerminalNode[] WHITESPACE() { return GetTokens(OnionScriptParser.WHITESPACE); }
		public ITerminalNode WHITESPACE(int i) {
			return GetToken(OnionScriptParser.WHITESPACE, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Argument_anyContext argument_any() {
			return GetRuleContext<Argument_anyContext>(0);
		}
		public ITerminalNode STATEMENT_END() { return GetToken(OnionScriptParser.STATEMENT_END, 0); }
		public Variable_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_definitionContext variable_definition() {
		Variable_definitionContext _localctx = new Variable_definitionContext(Context, State);
		EnterRule(_localctx, 64, RULE_variable_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(STATEMENT_BEGIN);
			State = 340; operator_let();
			State = 341; Match(WHITESPACE);
			State = 342; identifier();
			State = 343; Match(WHITESPACE);
			State = 344; argument_any();
			State = 345; Match(STATEMENT_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(OnionScriptParser.TEXT, 0); }
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 66, RULE_text);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(OnionScriptParser.INTEGER, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 68, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(OnionScriptParser.FLOAT, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 70, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(OnionScriptParser.BOOLEAN, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 72, RULE_boolean);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(OnionScriptParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 74, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_textContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MethodcallContext methodcall() {
			return GetRuleContext<MethodcallContext>(0);
		}
		public Anonymous_functionContext anonymous_function() {
			return GetRuleContext<Anonymous_functionContext>(0);
		}
		public Argument_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_text; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_textContext argument_text() {
		Argument_textContext _localctx = new Argument_textContext(Context, State);
		EnterRule(_localctx, 76, RULE_argument_text);
		try {
			State = 361;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 357; text();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 358; identifier();
				}
				break;
			case STATEMENT_BEGIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 359; methodcall();
				}
				break;
			case STATEMENT_BEGIN_IGNORE_WHITESPACE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 360; anonymous_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_integerContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MethodcallContext methodcall() {
			return GetRuleContext<MethodcallContext>(0);
		}
		public Anonymous_functionContext anonymous_function() {
			return GetRuleContext<Anonymous_functionContext>(0);
		}
		public Argument_integerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_integer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_integer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_integerContext argument_integer() {
		Argument_integerContext _localctx = new Argument_integerContext(Context, State);
		EnterRule(_localctx, 78, RULE_argument_integer);
		try {
			State = 367;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 363; integer();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 364; identifier();
				}
				break;
			case STATEMENT_BEGIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 365; methodcall();
				}
				break;
			case STATEMENT_BEGIN_IGNORE_WHITESPACE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 366; anonymous_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_floatContext : ParserRuleContext {
		public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MethodcallContext methodcall() {
			return GetRuleContext<MethodcallContext>(0);
		}
		public Anonymous_functionContext anonymous_function() {
			return GetRuleContext<Anonymous_functionContext>(0);
		}
		public Argument_floatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_float; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_float(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_floatContext argument_float() {
		Argument_floatContext _localctx = new Argument_floatContext(Context, State);
		EnterRule(_localctx, 80, RULE_argument_float);
		try {
			State = 373;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 369; @float();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 370; identifier();
				}
				break;
			case STATEMENT_BEGIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 371; methodcall();
				}
				break;
			case STATEMENT_BEGIN_IGNORE_WHITESPACE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 372; anonymous_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_numberContext : ParserRuleContext {
		public Argument_integerContext argument_integer() {
			return GetRuleContext<Argument_integerContext>(0);
		}
		public Argument_floatContext argument_float() {
			return GetRuleContext<Argument_floatContext>(0);
		}
		public Argument_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_numberContext argument_number() {
		Argument_numberContext _localctx = new Argument_numberContext(Context, State);
		EnterRule(_localctx, 82, RULE_argument_number);
		try {
			State = 377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 375; argument_integer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 376; argument_float();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_booleanContext : ParserRuleContext {
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MethodcallContext methodcall() {
			return GetRuleContext<MethodcallContext>(0);
		}
		public Anonymous_functionContext anonymous_function() {
			return GetRuleContext<Anonymous_functionContext>(0);
		}
		public Argument_booleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_boolean; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_boolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_booleanContext argument_boolean() {
		Argument_booleanContext _localctx = new Argument_booleanContext(Context, State);
		EnterRule(_localctx, 84, RULE_argument_boolean);
		try {
			State = 383;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379; boolean();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 380; identifier();
				}
				break;
			case STATEMENT_BEGIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 381; methodcall();
				}
				break;
			case STATEMENT_BEGIN_IGNORE_WHITESPACE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 382; anonymous_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_statementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Argument_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_statementContext argument_statement() {
		Argument_statementContext _localctx = new Argument_statementContext(Context, State);
		EnterRule(_localctx, 86, RULE_argument_statement);
		try {
			State = 387;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STATEMENT_BEGIN:
			case STATEMENT_BEGIN_IGNORE_WHITESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 385; statement();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 386; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_anyContext : ParserRuleContext {
		public Argument_textContext argument_text() {
			return GetRuleContext<Argument_textContext>(0);
		}
		public Argument_numberContext argument_number() {
			return GetRuleContext<Argument_numberContext>(0);
		}
		public Argument_booleanContext argument_boolean() {
			return GetRuleContext<Argument_booleanContext>(0);
		}
		public Argument_anyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_any; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOnionScriptVisitor<TResult> typedVisitor = visitor as IOnionScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_any(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_anyContext argument_any() {
		Argument_anyContext _localctx = new Argument_anyContext(Context, State);
		EnterRule(_localctx, 88, RULE_argument_any);
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 389; argument_text();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 390; argument_number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 391; argument_boolean();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '&', '\x18D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x3', '\x2', '\a', 
		'\x2', '^', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x61', '\v', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\x64', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'g', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'p', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'y', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '|', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xEE', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xF6', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\xFE', '\n', '\x5', '\x5', '\x5', '\x100', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\a', '\x1F', '\x13A', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x13D', 
		'\v', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x147', '\n', ' ', 
		'\f', ' ', '\xE', ' ', '\x14A', '\v', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', 
		'$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', 
		'\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', 
		'(', '\x16C', '\n', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x5', ')', '\x172', '\n', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x5', '*', '\x178', '\n', '*', '\x3', '+', '\x3', '+', '\x5', '+', 
		'\x17C', '\n', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', 
		',', '\x182', '\n', ',', '\x3', '-', '\x3', '-', '\x5', '-', '\x186', 
		'\n', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x18B', '\n', 
		'.', '\x3', '.', '\x2', '\x2', '/', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\x2', '\x2', '\x2', '\x18F', '\x2', '_', 
		'\x3', '\x2', '\x2', '\x2', '\x4', 'o', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'q', '\x3', '\x2', '\x2', '\x2', '\b', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x101', '\x3', '\x2', '\x2', '\x2', '\f', '\x103', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x105', '\x3', '\x2', '\x2', '\x2', '\x10', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x16', '\x10D', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x113', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x115', '\x3', '\x2', '\x2', '\x2', ' ', '\x117', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x119', '\x3', '\x2', '\x2', '\x2', '$', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x11F', '\x3', '\x2', '\x2', '\x2', '*', '\x121', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x123', '\x3', '\x2', '\x2', '\x2', '.', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x129', '\x3', '\x2', '\x2', '\x2', '\x34', '\x12B', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x38', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x137', '\x3', '\x2', '\x2', '\x2', '>', '\x140', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x42', '\x155', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x15F', '\x3', '\x2', '\x2', '\x2', 'H', '\x161', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x163', '\x3', '\x2', '\x2', '\x2', 'L', '\x165', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x171', '\x3', '\x2', '\x2', '\x2', 'R', '\x177', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x17B', '\x3', '\x2', '\x2', '\x2', 'V', '\x181', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x18A', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\x5', ':', '\x1E', 
		'\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x65', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x64', '\x5', '\x4', '\x3', '\x2', '\x63', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'h', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '\x2', '\x2', '\x3', 'i', 
		'\x3', '\x3', '\x2', '\x2', '\x2', 'j', 'p', '\x5', '\x6', '\x4', '\x2', 
		'k', 'p', '\x5', '>', ' ', '\x2', 'l', 'p', '\x5', '@', '!', '\x2', 'm', 
		'p', '\x5', '\x42', '\"', '\x2', 'n', 'p', '\x5', '<', '\x1F', '\x2', 
		'o', 'j', '\x3', '\x2', '\x2', '\x2', 'o', 'k', '\x3', '\x2', '\x2', '\x2', 
		'o', 'l', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 
		'o', 'n', '\x3', '\x2', '\x2', '\x2', 'p', '\x5', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\a', '\x1C', '\x2', '\x2', 'r', 's', '\x5', '\b', '\x5', 
		'\x2', 's', 't', '\a', '\x1D', '\x2', '\x2', 't', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'z', '\x5', 'L', '\'', '\x2', 'v', 'w', '\a', '\x1B', 
		'\x2', '\x2', 'w', 'y', '\x5', 'Z', '.', '\x2', 'x', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'y', '|', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x5', 
		'\x18', '\r', '\x2', '~', '\x7F', '\a', '\x1B', '\x2', '\x2', '\x7F', 
		'\x80', '\x5', 'L', '\'', '\x2', '\x80', '\x81', '\a', '\x1B', '\x2', 
		'\x2', '\x81', '\x82', '\x5', 'Z', '.', '\x2', '\x82', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\x5', '\x1A', '\xE', '\x2', '\x84', 
		'\x85', '\a', '\x1B', '\x2', '\x2', '\x85', '\x86', '\x5', 'T', '+', '\x2', 
		'\x86', '\x87', '\a', '\x1B', '\x2', '\x2', '\x87', '\x88', '\x5', 'T', 
		'+', '\x2', '\x88', '\x100', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', 
		'\x5', '\x1C', '\xF', '\x2', '\x8A', '\x8B', '\a', '\x1B', '\x2', '\x2', 
		'\x8B', '\x8C', '\x5', 'T', '+', '\x2', '\x8C', '\x8D', '\a', '\x1B', 
		'\x2', '\x2', '\x8D', '\x8E', '\x5', 'T', '+', '\x2', '\x8E', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x5', '\x1E', '\x10', '\x2', 
		'\x90', '\x91', '\a', '\x1B', '\x2', '\x2', '\x91', '\x92', '\x5', 'T', 
		'+', '\x2', '\x92', '\x93', '\a', '\x1B', '\x2', '\x2', '\x93', '\x94', 
		'\x5', 'T', '+', '\x2', '\x94', '\x100', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\x5', ' ', '\x11', '\x2', '\x96', '\x97', '\a', '\x1B', '\x2', 
		'\x2', '\x97', '\x98', '\x5', 'T', '+', '\x2', '\x98', '\x99', '\a', '\x1B', 
		'\x2', '\x2', '\x99', '\x9A', '\x5', 'T', '+', '\x2', '\x9A', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x5', '\"', '\x12', '\x2', 
		'\x9C', '\x9D', '\a', '\x1B', '\x2', '\x2', '\x9D', '\x9E', '\x5', 'T', 
		'+', '\x2', '\x9E', '\x9F', '\a', '\x1B', '\x2', '\x2', '\x9F', '\xA0', 
		'\x5', 'T', '+', '\x2', '\xA0', '\x100', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xA2', '\x5', '$', '\x13', '\x2', '\xA2', '\xA3', '\a', '\x1B', '\x2', 
		'\x2', '\xA3', '\xA4', '\x5', 'V', ',', '\x2', '\xA4', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA6', '\x5', '&', '\x14', '\x2', '\xA6', 
		'\xA7', '\a', '\x1B', '\x2', '\x2', '\xA7', '\xA8', '\x5', 'V', ',', '\x2', 
		'\xA8', '\xA9', '\a', '\x1B', '\x2', '\x2', '\xA9', '\xAA', '\x5', 'V', 
		',', '\x2', '\xAA', '\x100', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', 
		'\x5', '(', '\x15', '\x2', '\xAC', '\xAD', '\a', '\x1B', '\x2', '\x2', 
		'\xAD', '\xAE', '\x5', 'V', ',', '\x2', '\xAE', '\xAF', '\a', '\x1B', 
		'\x2', '\x2', '\xAF', '\xB0', '\x5', 'V', ',', '\x2', '\xB0', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x5', '*', '\x16', '\x2', 
		'\xB2', '\xB3', '\a', '\x1B', '\x2', '\x2', '\xB3', '\xB4', '\x5', 'V', 
		',', '\x2', '\xB4', '\xB5', '\a', '\x1B', '\x2', '\x2', '\xB5', '\xB6', 
		'\x5', 'V', ',', '\x2', '\xB6', '\x100', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB8', '\x5', ',', '\x17', '\x2', '\xB8', '\xB9', '\a', '\x1B', '\x2', 
		'\x2', '\xB9', '\xBA', '\x5', 'V', ',', '\x2', '\xBA', '\xBB', '\a', '\x1B', 
		'\x2', '\x2', '\xBB', '\xBC', '\x5', 'V', ',', '\x2', '\xBC', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x5', '.', '\x18', '\x2', 
		'\xBE', '\xBF', '\a', '\x1B', '\x2', '\x2', '\xBF', '\xC0', '\x5', 'Z', 
		'.', '\x2', '\xC0', '\xC1', '\a', '\x1B', '\x2', '\x2', '\xC1', '\xC2', 
		'\x5', 'Z', '.', '\x2', '\xC2', '\x100', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC4', '\x5', '\x30', '\x19', '\x2', '\xC4', '\xC5', '\a', '\x1B', '\x2', 
		'\x2', '\xC5', '\xC6', '\x5', 'Z', '.', '\x2', '\xC6', '\xC7', '\a', '\x1B', 
		'\x2', '\x2', '\xC7', '\xC8', '\x5', 'Z', '.', '\x2', '\xC8', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x5', '\x32', '\x1A', '\x2', 
		'\xCA', '\xCB', '\a', '\x1B', '\x2', '\x2', '\xCB', '\xCC', '\x5', 'T', 
		'+', '\x2', '\xCC', '\xCD', '\a', '\x1B', '\x2', '\x2', '\xCD', '\xCE', 
		'\x5', 'T', '+', '\x2', '\xCE', '\x100', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD0', '\x5', '\x34', '\x1B', '\x2', '\xD0', '\xD1', '\a', '\x1B', '\x2', 
		'\x2', '\xD1', '\xD2', '\x5', 'T', '+', '\x2', '\xD2', '\xD3', '\a', '\x1B', 
		'\x2', '\x2', '\xD3', '\xD4', '\x5', 'T', '+', '\x2', '\xD4', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x5', '\x36', '\x1C', '\x2', 
		'\xD6', '\xD7', '\a', '\x1B', '\x2', '\x2', '\xD7', '\xD8', '\x5', 'T', 
		'+', '\x2', '\xD8', '\xD9', '\a', '\x1B', '\x2', '\x2', '\xD9', '\xDA', 
		'\x5', 'T', '+', '\x2', '\xDA', '\x100', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDC', '\x5', '\x38', '\x1D', '\x2', '\xDC', '\xDD', '\a', '\x1B', '\x2', 
		'\x2', '\xDD', '\xDE', '\x5', 'T', '+', '\x2', '\xDE', '\xDF', '\a', '\x1B', 
		'\x2', '\x2', '\xDF', '\xE0', '\x5', 'T', '+', '\x2', '\xE0', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x5', '\x12', '\n', '\x2', 
		'\xE2', '\xE3', '\a', '\x1B', '\x2', '\x2', '\xE3', '\xE4', '\x5', 'L', 
		'\'', '\x2', '\xE4', '\xE5', '\a', '\x1B', '\x2', '\x2', '\xE5', '\xE6', 
		'\x5', 'T', '+', '\x2', '\xE6', '\xE7', '\a', '\x1B', '\x2', '\x2', '\xE7', 
		'\xE8', '\x5', 'V', ',', '\x2', '\xE8', '\xE9', '\a', '\x1B', '\x2', '\x2', 
		'\xE9', '\xEA', '\x5', '<', '\x1F', '\x2', '\xEA', '\xED', '\a', '\x1B', 
		'\x2', '\x2', '\xEB', '\xEE', '\x5', '<', '\x1F', '\x2', '\xEC', '\xEE', 
		'\x5', '\x6', '\x4', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xED', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\x100', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xF0', '\x5', '\x14', '\v', '\x2', '\xF0', '\xF1', 
		'\a', '\x1B', '\x2', '\x2', '\xF1', '\xF2', '\x5', 'V', ',', '\x2', '\xF2', 
		'\xF5', '\a', '\x1B', '\x2', '\x2', '\xF3', '\xF6', '\x5', '<', '\x1F', 
		'\x2', '\xF4', '\xF6', '\x5', '\x6', '\x4', '\x2', '\xF5', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x5', '\x16', '\f', 
		'\x2', '\xF8', '\xF9', '\a', '\x1B', '\x2', '\x2', '\xF9', '\xFA', '\x5', 
		'V', ',', '\x2', '\xFA', '\xFD', '\a', '\x1B', '\x2', '\x2', '\xFB', '\xFE', 
		'\x5', '<', '\x1F', '\x2', '\xFC', '\xFE', '\x5', '\x6', '\x4', '\x2', 
		'\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFC', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\x100', '\x3', '\x2', '\x2', '\x2', '\xFF', 'u', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '}', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\x8F', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\t', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x102', '\a', '\x3', '\x2', '\x2', '\x102', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\a', '\x4', '\x2', '\x2', '\x104', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x106', '\a', '\x5', '\x2', '\x2', '\x106', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\a', '\x6', '\x2', 
		'\x2', '\x108', '\x11', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', 
		'\a', '\a', '\x2', '\x2', '\x10A', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x10C', '\a', '\b', '\x2', '\x2', '\x10C', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x10D', '\x10E', '\a', '\t', '\x2', '\x2', '\x10E', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\a', '\n', '\x2', '\x2', 
		'\x110', '\x19', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\a', '\v', 
		'\x2', '\x2', '\x112', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\a', '\f', '\x2', '\x2', '\x114', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x116', '\a', '\r', '\x2', '\x2', '\x116', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x117', '\x118', '\a', '\xE', '\x2', '\x2', '\x118', '!', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\a', '\xF', '\x2', '\x2', 
		'\x11A', '#', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\a', '\x10', 
		'\x2', '\x2', '\x11C', '%', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', 
		'\a', '\x11', '\x2', '\x2', '\x11E', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x120', '\a', '\x12', '\x2', '\x2', '\x120', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x121', '\x122', '\a', '\x13', '\x2', '\x2', '\x122', '+', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\a', '\x14', '\x2', '\x2', 
		'\x124', '-', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\a', '\x15', 
		'\x2', '\x2', '\x126', '/', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', 
		'\a', '\x16', '\x2', '\x2', '\x128', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x12A', '\a', '\x17', '\x2', '\x2', '\x12A', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x12C', '\a', '\x18', '\x2', '\x2', '\x12C', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', '\x19', '\x2', 
		'\x2', '\x12E', '\x37', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', 
		'\a', '\x1A', '\x2', '\x2', '\x130', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x132', '\a', '\x1C', '\x2', '\x2', '\x132', '\x133', '\x5', 
		'\n', '\x6', '\x2', '\x133', '\x134', '\a', '\x1B', '\x2', '\x2', '\x134', 
		'\x135', '\x5', '\x44', '#', '\x2', '\x135', '\x136', '\a', '\x1D', '\x2', 
		'\x2', '\x136', ';', '\x3', '\x2', '\x2', '\x2', '\x137', '\x13B', '\a', 
		'\x1E', '\x2', '\x2', '\x138', '\x13A', '\x5', '\x4', '\x3', '\x2', '\x139', 
		'\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\a', 
		'\x1F', '\x2', '\x2', '\x13F', '=', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x141', '\a', '\x1C', '\x2', '\x2', '\x141', '\x142', '\x5', '\f', '\a', 
		'\x2', '\x142', '\x143', '\a', '\x1B', '\x2', '\x2', '\x143', '\x148', 
		'\x5', 'L', '\'', '\x2', '\x144', '\x145', '\a', '\x1B', '\x2', '\x2', 
		'\x145', '\x147', '\x5', 'L', '\'', '\x2', '\x146', '\x144', '\x3', '\x2', 
		'\x2', '\x2', '\x147', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x148', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x148', '\x3', 
		'\x2', '\x2', '\x2', '\x14B', '\x14C', '\a', '\x1B', '\x2', '\x2', '\x14C', 
		'\x14D', '\x5', '<', '\x1F', '\x2', '\x14D', '\x14E', '\a', '\x1D', '\x2', 
		'\x2', '\x14E', '?', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\a', 
		'\x1C', '\x2', '\x2', '\x150', '\x151', '\x5', '\x10', '\t', '\x2', '\x151', 
		'\x152', '\a', '\x1B', '\x2', '\x2', '\x152', '\x153', '\x5', 'Z', '.', 
		'\x2', '\x153', '\x154', '\a', '\x1D', '\x2', '\x2', '\x154', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\a', '\x1C', '\x2', '\x2', 
		'\x156', '\x157', '\x5', '\xE', '\b', '\x2', '\x157', '\x158', '\a', '\x1B', 
		'\x2', '\x2', '\x158', '\x159', '\x5', 'L', '\'', '\x2', '\x159', '\x15A', 
		'\a', '\x1B', '\x2', '\x2', '\x15A', '\x15B', '\x5', 'Z', '.', '\x2', 
		'\x15B', '\x15C', '\a', '\x1D', '\x2', '\x2', '\x15C', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x15D', '\x15E', '\a', ' ', '\x2', '\x2', '\x15E', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', '\a', '#', '\x2', 
		'\x2', '\x160', 'G', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\a', 
		'\"', '\x2', '\x2', '\x162', 'I', '\x3', '\x2', '\x2', '\x2', '\x163', 
		'\x164', '\a', '!', '\x2', '\x2', '\x164', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x166', '\a', '$', '\x2', '\x2', '\x166', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x167', '\x16C', '\x5', '\x44', '#', '\x2', '\x168', '\x16C', 
		'\x5', 'L', '\'', '\x2', '\x169', '\x16C', '\x5', '\x6', '\x4', '\x2', 
		'\x16A', '\x16C', '\x5', '<', '\x1F', '\x2', '\x16B', '\x167', '\x3', 
		'\x2', '\x2', '\x2', '\x16B', '\x168', '\x3', '\x2', '\x2', '\x2', '\x16B', 
		'\x169', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16A', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', 'O', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x172', '\x5', 
		'\x46', '$', '\x2', '\x16E', '\x172', '\x5', 'L', '\'', '\x2', '\x16F', 
		'\x172', '\x5', '\x6', '\x4', '\x2', '\x170', '\x172', '\x5', '<', '\x1F', 
		'\x2', '\x171', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x171', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x171', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x170', '\x3', '\x2', '\x2', '\x2', '\x172', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x173', '\x178', '\x5', 'H', '%', '\x2', '\x174', '\x178', 
		'\x5', 'L', '\'', '\x2', '\x175', '\x178', '\x5', '\x6', '\x4', '\x2', 
		'\x176', '\x178', '\x5', '<', '\x1F', '\x2', '\x177', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '\x177', '\x174', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x175', '\x3', '\x2', '\x2', '\x2', '\x177', '\x176', '\x3', '\x2', '\x2', 
		'\x2', '\x178', 'S', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17C', '\x5', 
		'P', ')', '\x2', '\x17A', '\x17C', '\x5', 'R', '*', '\x2', '\x17B', '\x179', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', 'U', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x182', '\x5', 'J', 
		'&', '\x2', '\x17E', '\x182', '\x5', 'L', '\'', '\x2', '\x17F', '\x182', 
		'\x5', '\x6', '\x4', '\x2', '\x180', '\x182', '\x5', '<', '\x1F', '\x2', 
		'\x181', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x181', '\x17E', '\x3', 
		'\x2', '\x2', '\x2', '\x181', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x181', 
		'\x180', '\x3', '\x2', '\x2', '\x2', '\x182', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\x183', '\x186', '\x5', '\x4', '\x3', '\x2', '\x184', '\x186', 
		'\x5', 'L', '\'', '\x2', '\x185', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x184', '\x3', '\x2', '\x2', '\x2', '\x186', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x187', '\x18B', '\x5', 'N', '(', '\x2', '\x188', '\x18B', 
		'\x5', 'T', '+', '\x2', '\x189', '\x18B', '\x5', 'V', ',', '\x2', '\x18A', 
		'\x187', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x188', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18B', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '_', '\x65', 'o', 'z', '\xED', '\xF5', '\xFD', 
		'\xFF', '\x13B', '\x148', '\x16B', '\x171', '\x177', '\x17B', '\x181', 
		'\x185', '\x18A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace OrbHall.OnionScript.Compiler
